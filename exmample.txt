var prompt = require('prompt-sync')();
var ConversationV1 = require('watson-developer-cloud/conversation/v1');
var MyCoolAgent = require('./MyCoolAgent');

var openConvs = {};

// Set up Conversation service wrapper.
var conversation = new ConversationV1({
  username: '29e21bb7-d0bf-46af-8869-42528fc90c91', // replace with username from service key
  password: 'XfkVZkK85HgM', // replace with password from service key
  path: { 
    //workspace_id: 'f076af58-a401-42eb-b6bf-1ff765f173ac' // welcome conversation
    workspace_id: '571d72a1-cc86-4c7f-bd0f-8bd65e0617e8' // car example
    //workspace_id: '09a00409-65f0-48b4-ab7c-8ff6da87b6fc' // my example
  }, // replace with workspace ID
  version_date: '2016-07-11'
});

var echoAgent = new MyCoolAgent({
  accountId: '56072331',
  username: 'TestUserB',
  password: 'Password1!!'
});

var context = {};
var dialogID = "";

// Start conversation with empty message.
//conversation.message({}, processResponse);

// Process the conversation response.
function processResponse(err, response) {
  if (err) {
    console.error(err); // something went wrong
    return;
  }

  context = response.context;

  // If an intent was detected, log it out to the console.
  if (response.intents.length > 0) {
    console.log('Detected intent: #' + response.intents[0].intent);
  }

  // Display the output from dialog, if any.
  if (response.output.text.length != 0) {
      console.log(response.output.text[0]);
      echoAgent.publishEvent({
            dialogId: dialogID,
            event: {
                type: 'ContentEvent', 
                contentType: 'text/plain', 
                message: response.output.text[0]
            }
        });
  }

  // Display the full response for logs
  //console.log(response);

}

echoAgent.on('MyCoolAgent.ContentEvnet',(contentEvent)=>{
    if (contentEvent.message.startsWith('#close')) {
        echoAgent.updateConversationField({
            conversationId: contentEvent.dialogId,
            conversationField: [{
                    field: "ConversationStateField",
                    conversationState: "CLOSE"
                }]
        });
    } else {
        dialogID = contentEvent.dialogId;
        conversation.message({
          input: { text: contentEvent.message },
          context : context
        },processResponse);

        console.log("sending message: " + contentEvent.message);
    }
});